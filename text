#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;

struct Song {
    string title;
    string artist;
    string genre;
    int year;
};

class MusicRecommender {
private:
    vector<Song> songs;
    
public:
    void loadSongsFromFile() {
        
        ofstream file("songs.txt");
        file << "Dance The Night|Dua Lipa|Pop|2023\n";
        file << "Flowers|Miley Cyrus|Pop|2023\n";
        file << "Blinding Lights|The Weeknd|Pop|2019\n";
        
        file << "God's Plan|Drake|Hip-Hop|2018\n";
        file << "Sicko Mode|Travis Scott|Hip-Hop|2018\n";
        file << "Lose Yourself|Eminem|Hip-Hop|2002\n";
        
        file << "Sweet Child O' Mine|Guns N' Roses|Rock|1987\n";
        file << "Bohemian Rhapsody|Queen|Rock|1975\n";
        file << "Hotel California|Eagles|Rock|1976\n";
        
        file << "Strobe|deadmau5|Electronic|2010\n";
        file << "Sandstorm|Darude|Electronic|1999\n";
        file << "Animals|Martin Garrix|Electronic|2013\n";
        
        file << "Dynamite|BTS|K-Pop|2020\n";
        file << "How You Like That|Blackpink|K-Pop|2020\n";
        file << "Gangnam Style|PSY|K-Pop|2012\n";
        file.close();
        
        ifstream infile("songs.txt");
        string line;
        
        while (getline(infile, line)) {
            Song song;
            size_t pos = 0;
            string token;
            int count = 0;
            
            while ((pos = line.find('|')) != string::npos) {
                token = line.substr(0, pos);
                switch(count) {
                    case 0: song.title = token; break;
                    case 1: song.artist = token; break;
                    case 2: song.genre = token; break;
                }
                line.erase(0, pos + 1);
                count++;
            }
            song.year = stoi(line);
            songs.push_back(song);
        }
        infile.close();
    }
    
    vector<string> getGenres() {
        vector<string> genres;
        for (const auto& song : songs) {
            bool found = false;
            for (const auto& genre : genres) {
                if (genre == song.genre) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                genres.push_back(song.genre);
            }
        }
        return genres;
    }
    
    vector<Song> getSongsByGenre(const string& genre) {
        vector<Song> result;
        for (const auto& song : songs) {
            if (song.genre == genre) {
                result.push_back(song);
            }
        }
        return result;
    }
    
    Song getRandomSongByGenre(const string& genre) {
        vector<Song> genreSongs = getSongsByGenre(genre);
        if (genreSongs.empty()) {
            return Song{"No songs found", "", "", 0};
        }
        int randomIndex = rand() % genreSongs.size();
        return genreSongs[randomIndex];
    }
    
    void displayMenu() {
        vector<string> genres = getGenres();
        
        cout << "\nAvailable Genres:" << endl;
        for (int i = 0; i < genres.size(); i++) {
            cout << i + 1 << ". " << genres[i] << endl;
        }
    }
};

int main() {
    srand(time(0));
    MusicRecommender recommender;
    
    cout << "====================================" << endl;
    cout << "   Spotify Recommendation System   " << endl;
    cout << "====================================" << endl;
    
    recommender.loadSongsFromFile();
    
    char continueChoice;
    
    do {
        recommender.displayMenu();
        
        int choice;
        cout << "\nEnter your choice (1-5): ";
        cin >> choice;
        
        if (cin.fail()) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid input! Please enter a number." << endl;
            continue;
        }
        
        vector<string> genres = recommender.getGenres();
        
        if (choice >= 1 && choice <= genres.size()) {
            string selectedGenre = genres[choice - 1];
            Song recommendation = recommender.getRandomSongByGenre(selectedGenre);
            
            cout << "\nRECOMMENDATION FOR " << selectedGenre << endl;
            cout << "Title: " << recommendation.title << endl;
            cout << "Artist: " << recommendation.artist << endl;
            cout << "Year: " << recommendation.year << endl;
            
            vector<Song> genreSongs = recommender.getSongsByGenre(selectedGenre);
            cout << "\nOther songs in " << selectedGenre << ":" << endl;
            for (const auto& song : genreSongs) {
                if (song.title != recommendation.title) {
                    cout << " - " << song.title << " by " << song.artist << " (" << song.year << ")" << endl;
                }
            }
        } else {
            cout << "Invalid choice! Please select between 1 and " << genres.size() << endl;
        }
        
        cout << "\nWould you like another recommendation? (y/n): ";
        cin >> continueChoice;
        
    } while (continueChoice == 'y' || continueChoice == 'Y');
    
    cout << "\nThank you for using the Spotify Recommendation System!" << endl;
    
    return 0;
}